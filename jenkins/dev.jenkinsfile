pipeline {
    agent {
        node {
            label 'linux-server'
        }
    }
    options {
        timeout(time: 1, unit: 'HOURS')
    }
    environment {
        TF_VAR_ENV = 'dev'
        PIPENV_PIPFILE = "${WORKSPACE}/lambda/pipfile"
        GMAIL_USER=credentials('GMAIL_USER')
        GMAIL_PASSWORD=credentials('GMAIL_PASSWORD')
    }
    stages {
        stage('Initializing.') {
            steps {
                echo 'installing environment dependencies...'
                timeout(time: 5, unit: 'MINUTES') {
                    git branch: 'main',
                        url: 'https://github.com/issambenhida/sageowl.git',
                        credentialsId: '01'
                }
                /* sh 'pipenv install' */
            }
        }
        stage('Code Quality Check.') {
            stages{
                stage('Terraform Code Quality Check.'){
                    steps{
                        sh '''
                        cd environments/dev
                        tflocal fmt -check
                        tflint
                        '''
                    }
                }
                stage('Ansible Code Quality Check.'){
                    steps{
                        sh 'ansible-lint ansible/*'
                    }
                }
                stage('Python Code Quality Check.'){
                    steps{
                        sh '''
                        flake8 lambda/index.py
                        pylint lambda/index.py
                        '''
                    }
                }
            }
            /*
            pipenv run
            */
        }
        stage('Code Security Check.'){
            stages{
                stage('Terraform Code Security Check.'){
                    steps{
                        sh '''
                        cd environments/dev
                        tfsec .
                        '''
                    }
                }
                stage('Ansible Code Security Check.'){
                    steps{
                        sh 'checkov -f ansible/*'
                    }
                }
                stage('Python Code Security Check.'){
                    steps{
                        sh '''
                        bandit -r lambda/index.py
                        '''
                    }
                }
            }
        }
        stage('Unit Testing and Coverage Check.'){
            stages{
                stage('Unit Testing For Lambda.'){
                    steps{
                        sh 'pytest'
                    }
                }
                stage('Coverage Check.'){
                    steps{
                        sh '''
                        cd lambda
                        coverage run -m pytest
                        coverage report --fail-under=100
                        '''
                    }
                }
            }
        }
        stage('Deployment.'){
            stages{
                stage('Building Docker Containers.'){
                    steps{
                        sh '''
                        docker --version
                        docker-compose --version
                        docker-compose up -d
                        '''
                    }
                }
                stage('Applying Terraform Infrastructure.'){
                    steps{
                        sh '''
                        cd environments/dev
                        tflocal init && tflocal plan && tflocal apply --auto-approve
                        '''
                    }
                }
                stage('Ansible Client Configuration.'){
                    steps{
                        sh '''
                        ansible-playbook -i ansible/inventory.ini ansible/ansible.yml
                        '''
                    }
                }
            }
        }
        stage(){
            stages{
                stage('Creating SageOwl Detectors.'){
                    steps{
                        sh'''
                        cd environments/dev/notifications
                        ./opensearch_api.sh -d sageowl_detector.json -r remote_file_inclusion_attempts.json -s sender.json -R receiver.json -c channel.json
                        '''
                    }
                }
            }
        }
    }
}
