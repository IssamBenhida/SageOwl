pipeline {
    agent {
        node {
            label 'linux-server'
        }
    }
    options {
        timeout(time: 1, unit: 'HOURS')
    }
    environment {
        TF_VAR_ENV = 'dev'
        PIPENV_PIPFILE = "${WORKSPACE}/lambda/pipfile"
        GMAIL_USER=credentials('GMAIL_USER')
        GMAIL_PASSWORD=credentials('GMAIL_PASSWORD')
    }
    stages {
        stage('Initializing.') {
            steps {
                echo 'installing environment dependencies...'
                /* sh '''
                pipenv install
                pipenv run
                ''' */
            }
        }
        stage('Code Quality Check.') {
            steps{
                script{
                    echo 'Running Terraform, Ansible, and Python code quality checks...'
                    sh '''
                    # Terraform Code Quality Checks
                    cd environments/dev
                    tflocal fmt -check
                    tflint

                    # Ansible Code Quality Checks
                    cd ../../
                    ansible-lint ansible/*

                    # Python Code Quality Checks
                    flake8 lambda/index.py
                    pylint lambda/index.py
                    '''
                }
            }
        }
        stage('Code Security Check.'){
            steps{
                script{
                    echo 'Running Terraform, Ansible, and Python code security checks...'
                    sh '''
                    # Terraform Code Security Checks
                    cd environments/dev
                    tfsec .

                    # Ansible Code Security Checks
                    cd ../../
                    checkov -f ansible/*

                    # Python Code Security Checks
                    bandit -r lambda/index.py
                    '''
                }
            }
        }
        stage('Unit Testing and Coverage Check.'){
            steps{
                script {
                    echo 'Running unit tests and coverage check for Lambda...'
                    sh '''
                    # Unit Testing for Lambda
                    cd lambda
                    pytest

                    # Coverage Check
                    coverage run -m pytest
                    coverage report --fail-under=100
                    '''
                }
            }
        }
        stage('Deploying Infrastructure.') {
            steps{
                script {
                    echo 'Building Docker containers and applying Terraform infrastructure...'
                    sh '''
                    # Docker Compose Setup
                    docker-compose up -d

                    # Wait 10 sec
                    sleep 30

                    # Apply Terraform Infrastructure
                    cd environments/dev
                    tflocal init && tflocal apply --auto-approve

                    # Ansible Client Configuration
                    cd ../../
                    ansible-playbook -i ansible/inventory.ini ansible/ansible.yml
                    '''
                }
            }
        }
        stage('Automated Testing and Reporting.'){
            steps{
                script {
                    echo 'Creating SageOwl detectors and setting up notifications...'
                    sh '''
                    cd environments/dev/notifications
                    ./opensearch_api.sh -d sageowl_detector.json -r remote_file_inclusion_attempts.json -s sender.json -R receiver.json -c channel.json
                    '''
                }
            }
        }
    }
}
